```python
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from pages.base_page import BasePage
from locators.login_locators import LoginPageLocators as Loc

class LoginPage(BasePage):
    def __init__(self, driver):
        super().__init__(driver)
        # 기본 URL 설정
        self.url = "http://localhost:4100/login"
    
    def navigate(self):
        """로그인 페이지로 이동"""
        self.driver.get(self.url)
        return self
    
    def enterEmail(self, email):
        """이메일 입력 필드에 값을 입력"""
        try:
            self._send_keys(Loc.EMAIL_INPUT, email)
            return self
        except Exception as e:
            print(f"이메일 입력 중 오류 발생: {str(e)}")
            raise
    
    def enterPassword(self, password):
        """비밀번호 입력 필드에 값을 입력"""
        try:
            self._send_keys(Loc.PASSWORD_INPUT, password)
            return self
        except Exception as e:
            print(f"비밀번호 입력 중 오류 발생: {str(e)}")
            raise
    
    def clickSignIn(self):
        """로그인 버튼 클릭"""
        try:
            self._click(Loc.SIGN_IN_BUTTON)
            return self
        except Exception as e:
            print(f"로그인 버튼 클릭 중 오류 발생: {str(e)}")
            raise
    
    def login(self, email, password):
        """이메일과 비밀번호를 입력하고 로그인 버튼 클릭"""
        try:
            self.enterEmail(email)
            self.enterPassword(password)
            self.clickSignIn()
            return self
        except Exception as e:
            print(f"로그인 프로세스 중 오류 발생: {str(e)}")
            raise
    
    def getErrorMessages(self):
        """로그인 실패 시 표시되는 오류 메시지 목록 반환"""
        try:
            # 오류 메시지가 표시될 때까지 명시적 대기
            WebDriverWait(self.driver, 10).until(
                EC.visibility_of_element_located(Loc.ERROR_MESSAGES)
            )
            elements = self._find_elements(Loc.ERROR_MESSAGES)
            return [element.text for element in elements]
        except Exception as e:
            print(f"오류 메시지 가져오기 중 오류 발생: {str(e)}")
            return []
    
    def isSignInButtonEnabled(self):
        """로그인 버튼이 활성화되어 있는지 확인"""
        try:
            button = self._find_element(Loc.SIGN_IN_BUTTON)
            return button.is_enabled()
        except Exception as e:
            print(f"로그인 버튼 상태 확인 중 오류 발생: {str(e)}")
            return False
    
    def isAtLoginPage(self):
        """현재 로그인 페이지에 있는지 확인"""
        try:
            return "Sign In" in self.driver.title and self._is_displayed(Loc.SIGN_IN_BUTTON)
        except Exception as e:
            print(f"페이지 확인 중 오류 발생: {str(e)}")
            return False
```